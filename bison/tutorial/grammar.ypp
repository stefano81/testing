%{
  #include <iostream>
  #include <cctype>
  #include <cstring>
  #include <vector>
  #include <stack>

  #include "ast.hpp"

  using namespace std;

  void yyerror(const char *error);
  int yylex();
  void clear_stack();

  int vars['Z' - 'A' + 1];
  stack<Expression *> nodes;

%}

%token IDENT NUMBER

%union {
  Expression *exp;
  int value;
  char ident;
}

%type <exp> exp
%type <value> NUMBER
%type <ident> IDENT

%left '+'
%right '*'
%%

prompt : exp '\n' {
			if ($1) {
			   cout << $1->value() << endl;
			   clear_stack();
			}
       	     	  }
       | prompt exp '\n' {
				if ($2) {
				   cout << $2->value() << endl;
				   clear_stack();
				}
       	 	    	 }
	| error '\n'	 { clear_stack() }
	;

exp 	: exp '+' exp {
			$$ = new Plus($1, $3);
			nodes.pop();
			nodes.pop();
			nodes.push($$);
	      	      }
	| exp '*' exp {
			$$ = new Times($1, $3);
			nodes.pop();
			nodes.pop();
			nodes.push($$);
	      	      }
	| IDENT	      {
			$$ = new Ident(&vars[$1 - 'A']);
			nodes.push($$);
	  	      }
	| NUMBER      {
			$$ = new Number($1);
			nodes.push($$);
	  	      }
	| IDENT '=' exp	{
				vars[$1 - 'A'] = $3->value();
				$$ = $3;
				nodes.push($$);
	  	      	}
	;
%%

int main() {
    memset(vars, 0, sizeof(vars));
    return yyparse();
}

void yyerror(const char *error) {
     cerr << error << endl;
}

int yylex() {
     char ch;

     do {
     	ch = cin.peek();
	if (isalpha(ch)) {
	   cin.get();
	   
	   yylval.ident = ch;

	   return IDENT;
	}

	if (isdigit(ch)) {
	   int value = 0;
	   while (!cin.eof() && isdigit(ch)) {
	   	 cin.get();
		 value = value * 10 + ch - '0';
		 ch = cin.peek();
	   }

	   yylval.value = value;
	   return NUMBER;
	}

	if ('+' == ch || '*' == ch || '=' == ch || '\n' == ch) {
	   cin.get();
	   return ch;
	}

	cin.get();
     } while (!cin.eof());

     return -1;
}

void clear_stack() {
     while (!nodes.empty()) {
     	   delete nodes.top();	   
     	   nodes.pop();
     }
}